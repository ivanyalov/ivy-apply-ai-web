API — программный интерфейс системы для взаимодействия с системами ТСП.

Интерфейс работает по адресу api.cloudpayments.ru и поддерживает функции для выполнения платежа, отмены оплаты, возврата денег, завершения платежей, выполненных по двухстадийной схеме, создания и отмены подписок на рекуррентные платежи, а также отправки счетов по почте.

Принцип работы
Параметры передаются методом POST в теле запроса в формате «ключ=значение» либо в JSON.
API может принимать не больше 150 000 полей в одном запросе. Тайм-аут на получение ответа от API — 5 минут.
Во всех запросах к API если передать число с дробной частью в целочисленное поле, то ошибки не будет, зато произойдёт математическое округление.
API ограничивает максимальное количество одновременных запросов для тестовых терминалов до 5, для боевых до 30. Если количество обрабатываемых в данный момент запросов к сайту больше ограничения - API будет возвращать ответ с HTTP кодом 429 (Too many Requests) до момента пока не будет завершена обработка хотя бы одного запроса. При необходимости пересмотра ограничений - обратитесь к персональному менеджеру.
Выбор формата передачи параметров определяется на стороне клиента и управляется через заголовок запроса Content-Type.

Для параметров «ключ=значение» Content-Type: application/x-www-form-urlencoded;
Для параметров JSON Content-Type: application/json;
Ответ система выдает в JSON-формате, который как минимум включает в себя два параметра: Success и Message:

{ "Success": false, "Message": "Invalid Amount value" }


Аутентификация запросов
Для аутентификации запроса используется HTTP Basic Auth — отправка логина и пароля в заголовке HTTP-запроса. В качестве логина используется Public ID, в качестве пароля — API Secret. Оба этих значения можно получить в личном кабинете.

Если в запросе не передан заголовок с данными аутентификации или переданы неверные данные, система вернет HTTP-статус 401 – Unauthorized.
API secret используется для обеспечения безопасности. Он должен храниться в защищенном месте.
Идемпотентность API
Идемпотентность — свойство API при повторном запросе выдавать тот же результат, что на первичный запрос без повторной обработки. Это значит, что вы можете отправить несколько запросов к системе с одинаковым идентификатором, при этом обработан будет только один успешный запрос, а все ответы будут идентичными. Таким образом реализуется защита от сетевых ошибок, которые приводят к созданию дублированных записей и действий.
Для включения идемпотентности необходимо в запросе к API передавать заголовок с ключом X-Request-ID, содержащий уникальный идентификатор. Формирование идентификатора запроса остается на вашей стороне — это может быть guid, комбинация из номера заказа, даты и суммы или любое другое значение на ваше усмотрение.
Каждый новый запрос, который необходимо обработать, должен включать новое значение X-Request-ID. Обработанный результат хранится в системе в течение 1 часа.


Тестовый метод
Для проверки взаимодействия с API можно вызвать тестовый метод.

Адрес метода:
https://api.cloudpayments.ru/test

Параметры запроса:
Отсутствуют.

Пример ответа:
В ответ метод возвращает статус запроса.

{"Success":true,"Message":"bd6353c3-0ed6-4a65-946f-083664bf8dbd"}



Создание подписки на рекуррентные платежи
Метод создания подписки на рекуррентные платежи.

 Оплата по токену проходит только на том терминале (publicId), на котором был получен токен. Если необходимо использовать токены на других терминалах, обратитесь в свободной форме на почту assistant@cp.ru
Адрес метода:
https://api.cloudpayments.ru/subscriptions/create

Параметры запроса:

Параметр	Формат	Применение	Описание
Token	String	Обязательный	Токен карты, выданный системой после первого платежа
AccountId	String	Обязательный	Идентификатор пользователя
Description	String	Обязательный	Назначение платежа в свободной форме
Email	String	Необязательный	E-mail плательщика
Amount	Number	Обязательный	Cумма платежа в валюте, разделитель точка. Количество не нулевых знаков после точки – 2
Currency	String	Обязательный	Валюта: RUB/USD/EUR/GBP (см. справочник)
RequireConfirmation	Bool	Обязательный	Если значение true — платежи будут выполняться по двухстадийной схеме
StartDate	DateTime	Обязательный	Дата и время первого платежа по плану во временной зоне UTC. Значение должно быть в будущем
Interval	String	Обязательный	Интервал. Возможные значения: Day, Week, Month
Period	Int	Обязательный	Период. В комбинации с интервалом, 1 Month значит раз в месяц, а 2 Week — раз в две недели. Должен быть больше 0
MaxPeriods	Int	Необязательный	Максимальное количество платежей в подписке. Если указан, должен быть больше 0
CustomerReceipt	json	Необязательный	Для изменения состава онлайн-чека
В ответ на корректно сформированный запрос система возвращает сообщение об успешно выполненной операции и идентификатор подписки.

Пример запроса:

{  
   "token": "477BBA133C182267FE5F086924ABDC5DB71F77BFC27F01F2843F2CDC69D89F05",
   "accountId": "user_x",
   "description": "Ежемесячная подписка на сервис example.com",
   "email": "user@example.com",
   "amount": 399,
   "currency": "RUB",
   "requireConfirmation": false,
   "startDate": "2021-11-02T21:00:00",
   "interval": "Day",
   "period": 5
}
Пример ответа:

 {
    "Model": {
        "Id": "sc_221da6421dc44dbd2cc3464f6f083",
        "AccountId": "user_x",
        "Description": "Ежемесячная подписка на сервис example.com",
        "Email": "user@example.com",
        "Amount": 399,
        "CurrencyCode": 0,
        "Currency": "RUB",
        "RequireConfirmation": false,
        "StartDate": "/Date(1635886800000)/",
        "StartDateIso": "2021-11-02T21:00:00",
        "IntervalCode": 2,
        "Interval": "Day",
        "Period": 5,
        "MaxPeriods": null,
        "CultureName": "ru-RU",
        "StatusCode": 0,
        "Status": "Active",
        "SuccessfulTransactionsNumber": 0,
        "FailedTransactionsNumber": 0,
        "LastTransactionDate": null,
        "LastTransactionDateIso": null,
        "NextTransactionDate": "/Date(1635886800000)/",
        "NextTransactionDateIso": "2021-11-02T21:00:00",
        "Receipt": null,
        "FailoverSchemeId": null
    },
    "Success": true,
    "Message": null
}


Платежный виджет
Платежный виджет — всплывающая форма для ввода реквизитов карты и электронной почты плательщика. 
Виджет автоматически определяет тип платежной системы (Visa, MasterCard, Maestro или «МИР»), банк-эмитент карты, а также показывает соответствующие логотипы. 
Форма оптимизирована для использования в любых браузерах и мобильных устройствах. 
Внутри виджета открывается iframe, который гарантирует безопасность передачи карточных данных и не требует от ТСП сертификации для использования.
Для установки виджета необходимо прописать на сайте скрипт в раздел head:
Для появления платежной формы необходимо зарегистрировать функцию для вызова метода pay, передав в него параметр auth или charge, а также параметры оплаты:

this.pay = function () {
 var widget = new cp.CloudPayments();
    widget.pay('auth', // или 'charge'
        { //options
            publicId: 'test_api_00000000000000000000002', //id из личного кабинета
            description: 'Оплата товаров в example.com', //назначение
            amount: 100, //сумма
            currency: 'RUB', //валюта
            accountId: 'user@example.com', //идентификатор плательщика (необязательно)
            invoiceId: '1234567', //номер заказа  (необязательно)
            email: 'user@example.com', //email плательщика (необязательно)
            skin: "mini", //дизайн виджета (необязательно)
            data: {
                myProp: 'myProp value'
            }
        },
        {
            onSuccess: function (options) { // success
                //действие при успешной оплате
            },
            onFail: function (reason, options) { // fail
                //действие при неуспешной оплате
            },
            onComplete: function (paymentResult, options) { //Вызывается как только виджет получает от api.cloudpayments ответ с результатом транзакции.
                //например вызов вашей аналитики Facebook Pixel
            }
        }
    )
};
И прописать вызов функции на событие, например, нажатие кнопки «Оплатить»:

$('#checkout').click(pay);
В примере используется библиотека jquery.


Параметры конструктора - Widget
Объект widgetOptions является необязательным и может не передаваться

Пример с переданным входным параметром
var widgetOptions = {
     // {WidgetOptions}
};
var widget = new cp.CloudPayments(widgetOptions);
Минимальный пример
var widget = new cp.CloudPayments();
Пример объявления параметров в конструкторе виджета и описание входных параметров виджета — в других разделах.

Параметры оплаты
Вызов функции pay c аргументом auth или charge определяет схему проведения оплаты:

charge - для одностадийной оплаты
var payments = new cp.CloudPayments();

window.pay = function () {
    payments.pay("charge", { 
        // IPaymentOptions
});
auth - для двухстадийной оплаты
var payments = new cp.CloudPayments();

window.pay = function () {
    payments.pay("auth", { 
        // IPaymentOptions
});
Пример объявления виджета с минимальным количеством и подробное описание входных параметров виджета - в других разделах.

Локализация виджета
По умолчанию мы отображаем виджет на русском языке. Для вызова виджета на других языках передайте в параметрах инициализации виджета параметр language.

var widget = new cp.CloudPayments({language: "en-US"});
Список поддерживаемых языков представлен в отдельном разделе.



Рекуррентные платежи (подписка)
После успешного завершения оплаты виджет может автоматически создавать подписку на рекуррентные платежи. Для это нужно добавить несколько параметров запуска:

Параметр	Формат	Применение	Описание
Interval	String	Обязательный	Интервал. Возможные значения: Day, Week, Month
Period	Int	Обязательный	Период. В комбинации с интервалом, 1 Month значит раз в месяц, а 2 Week — раз в две недели. Должен быть больше 0
MaxPeriods	Int	Необязательный	Максимальное количество платежей в подписке. По умолчанию стоит без ограничений. Если задаете количество, проверьте, чтобы оно было больше 0
Amount	Numeric	Необязательный	Сумма регулярного платежа. По умолчанию совпадает с суммой первого, установочного платежа. Если указываете другую сумму, проверьте, чтобы она была больше 0
StartDate	DateTime	Необязательный	Дата и время первого регулярного платежа. По умолчанию запуск произойдет через указанный интервал и период, например через месяц. Если указываете другую дату, то она должна стоять в будущем времени
CustomerReceipt	String	Необязательный	Данные для формирования онлайн-чека в регулярных платежах
Параметры для запуска регулярных платежей необходимо добавить в объект data.СloudPayments.recurrent как в примере ниже:

this.pay = function () {
    var widget = new cp.CloudPayments();
    var receipt = {
            Items: [//товарные позиции
                 {
                    label: 'Наименование товара 3', //наименование товара
                    price: 300.00, //цена
                    quantity: 3.00, //количество
                    amount: 900.00, //сумма
                    vat: 20, //ставка НДС
                    method: 0, // тег-1214 признак способа расчета - признак способа расчета
                    object: 0, // тег-1212 признак предмета расчета - признак предмета товара, работы, услуги, платежа, выплаты, иного предмета расчета
                }
            ],
            taxationSystem: 0, //система налогообложения; необязательный, если у вас одна система налогообложения
            email: 'user@example.com', //e-mail покупателя, если нужно отправить письмо с чеком
            phone: '', //телефон покупателя в любом формате, если нужно отправить сообщение со ссылкой на чек
            isBso: false, //чек является бланком строгой отчетности
            amounts:
            {
                electronic: 900.00, // Сумма оплаты электронными деньгами
                advancePayment: 0.00, // Сумма из предоплаты (зачетом аванса) (2 знака после запятой)
                credit: 0.00, // Сумма постоплатой(в кредит) (2 знака после запятой)
                provision: 0.00 // Сумма оплаты встречным предоставлением (сертификаты, др. мат.ценности) (2 знака после запятой)
            }
        };

    var data = {};
    data.CloudPayments = {
        CustomerReceipt: receipt, //чек для первого платежа
        recurrent: {
         interval: 'Month',
         period: 1, 
         customerReceipt: receipt //чек для регулярных платежей
         }
         }; //создание ежемесячной подписки

    widget.charge({ // options
        publicId: 'test_api_00000000000000000000001', //id из личного кабинета
        description: 'Подписка на ежемесячный доступ к сайту example.com', //назначение
        amount: 1000, //сумма
        currency: 'RUB', //валюта
        invoiceId: '1234567', //номер заказа  (необязательно)
        accountId: 'user@example.com', //идентификатор плательщика (обязательно для создания подписки)
        data: data
    },
    function (options) { // success
        //действие при успешной оплате
    },
    function (reason, options) { // fail
        //действие при неуспешной оплате
    });
};
