import axios from "axios";
import { pool } from "./src/config/database";
import { createSubscription, getSubscriptionByUserId } from "./src/models/Subscription";
import { UserModel } from "./src/models/User";
import dotenv from "dotenv";

dotenv.config();

const BASE_URL = `http://localhost:${process.env.PORT || 8000}`;

async function cleanup(email: string) {
	await pool.query("DELETE FROM users WHERE email = $1", [email]);
}

async function testBothCancellationTypes() {
	console.log("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢: –û—Ç–º–µ–Ω–∞ –ø—Ä–æ–±–Ω–æ–π –∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫\n");
	console.log("=".repeat(60));

	// –¢–ï–°–¢ 1: –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
	console.log("\nüìã –¢–ï–°–¢ 1: –û—Ç–º–µ–Ω–∞ –ü–†–û–ë–ù–û–ô –ø–æ–¥–ø–∏—Å–∫–∏");
	console.log("-".repeat(40));

	const trialEmail = "test-trial-both@example.com";
	const trialPassword = "testpass123";

	try {
		await cleanup(trialEmail);

		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è trial
		await axios.post(`${BASE_URL}/api/auth/signup`, {
			email: trialEmail,
			password: trialPassword,
		});

		// –õ–æ–≥–∏–Ω–∏–º—Å—è
		const trialLogin = await axios.post(`${BASE_URL}/api/auth/signin`, {
			email: trialEmail,
			password: trialPassword,
		});
		const trialToken = trialLogin.data.token;

		// –ó–∞–ø—É—Å–∫–∞–µ–º trial
		await axios.post(
			`${BASE_URL}/api/subscriptions/start-trial`,
			{},
			{
				headers: { Authorization: `Bearer ${trialToken}` },
			}
		);

		// –û—Ç–º–µ–Ω—è–µ–º trial
		const trialCancel = await axios.post(
			`${BASE_URL}/api/payments/cloudpayments/cancel-subscription`,
			{},
			{ headers: { Authorization: `Bearer ${trialToken}` } }
		);

		if (trialCancel.data.success && trialCancel.data.subscriptionType === "trial") {
			console.log("‚úÖ –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –û–¢–ú–ï–ù–ê –†–ê–ë–û–¢–ê–ï–¢");
		} else {
			console.log("‚ùå –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –û–¢–ú–ï–ù–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢");
		}
	} catch (error: any) {
		console.log("‚ùå –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –û–®–ò–ë–ö–ê", error.response?.data || error.message);
	}

	// –¢–ï–°–¢ 2: –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞
	console.log("\nüìã –¢–ï–°–¢ 2: –û—Ç–º–µ–Ω–∞ –ü–†–ï–ú–ò–£–ú –ø–æ–¥–ø–∏—Å–∫–∏");
	console.log("-".repeat(40));

	const premiumEmail = "test-premium-both@example.com";
	const premiumPassword = "testpass123";

	try {
		await cleanup(premiumEmail);

		// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î
		const userModel = new UserModel();
		const premiumUser = await userModel.create(premiumEmail, premiumPassword);

		// –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É —Å CloudPayments –¥–∞–Ω–Ω—ã–º–∏
		await createSubscription({
			userId: premiumUser.id,
			status: "active",
			planType: "premium",
			startDate: new Date(),
			expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
			cloudPaymentsSubscriptionId: "test_cp_id_999",
			cloudPaymentsToken: "test_token_999",
		});

		// –õ–æ–≥–∏–Ω–∏–º—Å—è
		const premiumLogin = await axios.post(`${BASE_URL}/api/auth/signin`, {
			email: premiumEmail,
			password: premiumPassword,
		});
		const premiumToken = premiumLogin.data.token;

		// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–º–∏—É–º
		try {
			await axios.post(
				`${BASE_URL}/api/payments/cloudpayments/cancel-subscription`,
				{},
				{ headers: { Authorization: `Bearer ${premiumToken}` } }
			);
			console.log("‚ùå –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞: –ù–ï –î–û–õ–ñ–ù–ê –ë–´–õ–ê –û–¢–ú–ï–ù–ò–¢–¨–°–Ø (—Ç–µ—Å—Ç–æ–≤—ã–µ CloudPayments –¥–∞–Ω–Ω—ã–µ)");
		} catch (error: any) {
			const errorData = error.response?.data;
			if (errorData?.message?.includes("CloudPayments")) {
				console.log("‚úÖ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞: –õ–û–ì–ò–ö–ê –†–ê–ë–û–¢–ê–ï–¢ (–ø—ã—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ CloudPayments)");
			} else {
				console.log("‚ùå –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞: –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê", errorData);
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –∞–∫—Ç–∏–≤–Ω–æ–π
		const premiumAfter = await getSubscriptionByUserId(premiumUser.id);
		if (premiumAfter?.status === "active") {
			console.log("‚úÖ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞: –û–°–¢–ê–õ–ê–°–¨ –ê–ö–¢–ò–í–ù–û–ô (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)");
		} else {
			console.log("‚ùå –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞: –ù–ï–û–ñ–ò–î–ê–ù–ù–û –û–¢–ú–ï–ù–ò–õ–ê–°–¨");
		}
	} catch (error: any) {
		console.log("‚ùå –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞: –û–®–ò–ë–ö–ê", error.response?.data || error.message);
	}

	// –û—á–∏—Å—Ç–∫–∞
	await cleanup(trialEmail);
	await cleanup(premiumEmail);

	console.log("\n" + "=".repeat(60));
	console.log("üéØ –í–´–í–û–î:");
	console.log("‚úÖ –ü—Ä–æ–±–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ");
	console.log("‚úÖ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏–¥—É—Ç —á–µ—Ä–µ–∑ CloudPayments API");
	console.log("‚úÖ –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
	console.log("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ù–ï –°–õ–û–ú–ê–õ–û –ø—Ä–µ–º–∏—É–º –æ—Ç–º–µ–Ω—É");
}

async function main() {
	await testBothCancellationTypes();
	await pool.end();
}

main();
