import { pool } from "./src/config/database";
import { createSubscription, getSubscriptionByUserId } from "./src/models/Subscription";
import { UserModel } from "./src/models/User";
import axios from "axios";
import dotenv from "dotenv";

dotenv.config();

const BASE_URL = `http://localhost:${process.env.PORT || 8000}`;
const TEST_EMAIL = "test-premium-cancel@example.com";
const TEST_PASSWORD = "testpassword123";

async function cleanup() {
	// –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	await pool.query("DELETE FROM users WHERE email = $1", [TEST_EMAIL]);
}

async function testPremiumCancellationAPI() {
	try {
		console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ü–†–ï–ú–ò–£–ú –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ API...\n");

		// –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
		await cleanup();

		// 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î
		console.log("1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
		const userModel = new UserModel();
		const user = await userModel.create(TEST_EMAIL, TEST_PASSWORD);
		console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${user.id}`);

		// 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É —Å CloudPayments –¥–∞–Ω–Ω—ã–º–∏
		console.log("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É —Å CloudPayments...");
		const fakeCloudPaymentsId = "cp_test_subscription_123456";
		const fakeToken = "cp_test_token_789";

		const subscription = await createSubscription({
			userId: user.id,
			status: "active",
			planType: "premium",
			startDate: new Date(),
			expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // +30 –¥–Ω–µ–π
			cloudPaymentsSubscriptionId: fakeCloudPaymentsId,
			cloudPaymentsToken: fakeToken,
		});
		console.log(`   ‚úÖ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${subscription.id}`);
		console.log(`   üìä CloudPayments ID: ${fakeCloudPaymentsId}`);

		// 3. –õ–æ–≥–∏–Ω–∏–º—Å—è —á–µ—Ä–µ–∑ API
		console.log("\n3Ô∏è‚É£ –õ–æ–≥–∏–Ω–∏–º—Å—è —á–µ—Ä–µ–∑ API...");
		const loginResponse = await axios.post(`${BASE_URL}/api/auth/signin`, {
			email: TEST_EMAIL,
			password: TEST_PASSWORD,
		});
		const token = loginResponse.data.token;
		console.log(`   ‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${token.substring(0, 20)}...`);

		// 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
		console.log("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏...");
		const statusResponse = await axios.get(`${BASE_URL}/api/subscriptions/status`, {
			headers: {
				Authorization: `Bearer ${token}`,
			},
		});
		console.log(`   üìä –°—Ç–∞—Ç—É—Å –¥–æ –æ—Ç–º–µ–Ω—ã:`, statusResponse.data);

		// 5. –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É
		console.log("\n5Ô∏è‚É£ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É...");

		try {
			const cancelResponse = await axios.post(
				`${BASE_URL}/api/payments/cloudpayments/cancel-subscription`,
				{},
				{
					headers: {
						Authorization: `Bearer ${token}`,
						"Content-Type": "application/json",
					},
				}
			);

			console.log(`   ‚ö†Ô∏è CloudPayments API –æ—Ç–≤–µ—Ç–∏–ª:`, cancelResponse.data);

			// –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –∑–Ω–∞—á–∏—Ç –Ω–∞—à –∫–æ–¥ –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ CloudPayments
			// –≠—Ç–æ —Ö–æ—Ä–æ—à–æ, –∑–Ω–∞—á–∏—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç
			console.log("\n‚úÖ –õ–û–ì–ò–ö–ê –ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–û–ö –†–ê–ë–û–¢–ê–ï–¢!");
			console.log("   ‚Ä¢ –ö–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É");
			console.log("   ‚Ä¢ –ü–æ–ø—ã—Ç–∞–ª—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ CloudPayments API");
			console.log("   ‚Ä¢ –û—à–∏–±–∫–∞ –æ—Ç CloudPayments –æ–∂–∏–¥–∞–µ–º–∞ (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)");
		} catch (error: any) {
			if (error.response) {
				const errorData = error.response.data;
				console.log(`   üìã –û—Ç–≤–µ—Ç API:`, errorData);

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—à–∏–±–∫—É –æ—Ç CloudPayments
				if (errorData.message && errorData.message.includes("CloudPayments")) {
					console.log("\n‚úÖ –ü–†–ï–ú–ò–£–ú –õ–û–ì–ò–ö–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!");
					console.log("   ‚Ä¢ –ö–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É");
					console.log("   ‚Ä¢ –ü–æ–ø—ã—Ç–∞–ª—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ CloudPayments API");
					console.log("   ‚Ä¢ –ü–æ–ª—É—á–∏–ª –æ–∂–∏–¥–∞–µ–º—É—é –æ—à–∏–±–∫—É –æ—Ç CloudPayments (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)");
				} else if (errorData.message === "No active subscription found") {
					console.error("\n‚ùå –ü–†–ï–ú–ò–£–ú –õ–û–ì–ò–ö–ê –°–õ–û–ú–ê–ù–ê!");
					console.error("   ‚Ä¢ –ö–æ–¥ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É");
					console.error("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏");
				} else {
					console.log("\n‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", errorData);
				}
			} else {
				console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error.message);
			}
		}

		// 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –ù–ï –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ (—Ç–∞–∫ –∫–∞–∫ CloudPayments –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
		console.log("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã...");
		const afterCancellation = await getSubscriptionByUserId(user.id);
		console.log(`   üìä –°—Ç–∞—Ç—É—Å –≤ –ë–î: ${afterCancellation?.status}`);
		console.log(`   üìä –¢–∏–ø: ${afterCancellation?.planType}`);
		console.log(`   üìä CloudPayments ID: ${afterCancellation?.cloudPaymentsSubscriptionId}`);

		if (afterCancellation?.status === "active") {
			console.log("\n‚úÖ –û–¢–õ–ò–ß–ù–û! –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –∞–∫—Ç–∏–≤–Ω–æ–π");
			console.log("   ‚Ä¢ CloudPayments –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)");
			console.log("   ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è");
			console.log("   ‚Ä¢ –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ!");
		}
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
	} finally {
		// –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
		await cleanup();
		console.log("\nüßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã");
	}
}

async function main() {
	await testPremiumCancellationAPI();
	await pool.end();
}

main();
