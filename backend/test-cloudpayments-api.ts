import { subscriptionService } from "./src/services/subscription.service";
import { pool } from "./src/config/database";

async function testCloudPaymentsAPI() {
	try {
		console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º CloudPayments API...\n");

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
		const publicId = process.env.CLOUD_PAYMENTS_PUBLIC_ID;
		const secretKey = process.env.CLOUD_PAYMENTS_SECRET_KEY;

		console.log("üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:");
		console.log(`   - CLOUD_PAYMENTS_PUBLIC_ID: ${publicId ? "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"}`);
		console.log(`   - CLOUD_PAYMENTS_SECRET_KEY: ${secretKey ? "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"}\n`);

		if (!publicId || !secretKey) {
			console.log("‚ùå CloudPayments API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!");
			console.log("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω—ã:");
			console.log("   - CLOUD_PAYMENTS_PUBLIC_ID=–≤–∞—à_public_id");
			console.log("   - CLOUD_PAYMENTS_SECRET_KEY=–≤–∞—à_secret_key");
			return;
		}

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
		const usersResult = await pool.query(`
			SELECT 
				u.id, 
				u.email,
				s.id as subscription_id,
				s.status,
				s.plan_type,
				s.cloudpayments_subscription_id,
				s.cloudpayments_transaction_id,
				s.expires_at
			FROM users u
			LEFT JOIN subscriptions s ON u.id = s.user_id
			WHERE s.id IS NOT NULL
			ORDER BY s.created_at DESC
			LIMIT 1
		`);

		const userWithSubscription = usersResult.rows[0];

		if (!userWithSubscription) {
			console.log("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
			return;
		}

		console.log(`üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${userWithSubscription.email}`);
		console.log(`üìã –ü–æ–¥–ø–∏—Å–∫–∞:`);
		console.log(`   - ID: ${userWithSubscription.subscription_id}`);
		console.log(`   - –°—Ç–∞—Ç—É—Å: ${userWithSubscription.status}`);
		console.log(`   - –¢–∏–ø: ${userWithSubscription.plan_type}`);
		console.log(
			`   - CloudPayments Subscription ID: ${
				userWithSubscription.cloudpayments_subscription_id || "–Ω–µ—Ç"
			}`
		);
		console.log(
			`   - CloudPayments Transaction ID: ${
				userWithSubscription.cloudpayments_transaction_id || "–Ω–µ—Ç"
			}`
		);
		console.log(`   - –ò—Å—Ç–µ–∫–∞–µ—Ç: ${userWithSubscription.expires_at}\n`);

		// –¢–µ—Å—Ç–∏—Ä—É–µ–º getSubscriptionStatus
		console.log("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º getSubscriptionStatus...");
		const subscriptionStatus = await subscriptionService.getSubscriptionStatus(
			userWithSubscription.id
		);

		console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç getSubscriptionStatus:");
		console.log(JSON.stringify(subscriptionStatus, null, 2));

		// –ï—Å–ª–∏ –µ—Å—Ç—å CloudPayments subscription ID, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å
		if (userWithSubscription.cloudpayments_subscription_id) {
			console.log("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ CloudPayments API...");
			const cloudPaymentsResult = await subscriptionService.getCloudPaymentsSubscriptionStatus(
				userWithSubscription.cloudpayments_subscription_id
			);

			console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç CloudPayments API:");
			console.log(JSON.stringify(cloudPaymentsResult, null, 2));
		}

		console.log("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
	} finally {
		await pool.end();
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCloudPaymentsAPI();
