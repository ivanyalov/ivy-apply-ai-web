import { pool } from "./src/config/database";
import { getSubscriptionByUserId } from "./src/models/Subscription";

async function testCancelSubscription() {
	try {
		console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏...\n");

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
		const usersResult = await pool.query(`
			SELECT 
				u.id, 
				u.email,
				s.id as subscription_id,
				s.status,
				s.plan_type,
				s.cloudpayments_subscription_id,
				s.cloudpayments_token,
				s.expires_at
			FROM users u
			LEFT JOIN subscriptions s ON u.id = s.user_id
			WHERE s.status = 'active' AND s.plan_type = 'premium'
			LIMIT 1
		`);

		const userWithSubscription = usersResult.rows[0];

		if (!userWithSubscription) {
			console.log("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π premium –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
			const allSubscriptionsResult = await pool.query(`
				SELECT 
					u.email,
					s.status,
					s.plan_type,
					s.cloudpayments_subscription_id,
					s.expires_at
				FROM users u
				LEFT JOIN subscriptions s ON u.id = s.user_id
				WHERE s.id IS NOT NULL
				ORDER BY s.created_at DESC
				LIMIT 5
			`);

			console.log("\nüìã –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:");
			allSubscriptionsResult.rows.forEach((sub, index) => {
				console.log(
					`${index + 1}. ${sub.email}: ${sub.status} (${sub.plan_type}) - ${
						sub.cloudpayments_subscription_id || "–Ω–µ—Ç ID"
					}`
				);
			});

			return;
		}

		console.log(`üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${userWithSubscription.email}`);
		console.log(`üìã –ü–æ–¥–ø–∏—Å–∫–∞:`);
		console.log(`   - ID: ${userWithSubscription.subscription_id}`);
		console.log(`   - –°—Ç–∞—Ç—É—Å: ${userWithSubscription.status}`);
		console.log(`   - –¢–∏–ø: ${userWithSubscription.plan_type}`);
		console.log(
			`   - CloudPayments ID: ${userWithSubscription.cloudpayments_subscription_id || "–Ω–µ—Ç"}`
		);
		console.log(`   - –¢–æ–∫–µ–Ω: ${userWithSubscription.cloudpayments_token ? "–µ—Å—Ç—å" : "–Ω–µ—Ç"}`);
		console.log(`   - –ò—Å—Ç–µ–∫–∞–µ—Ç: ${userWithSubscription.expires_at}`);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ CloudPayments ID –¥–ª—è –æ—Ç–º–µ–Ω—ã
		if (!userWithSubscription.cloudpayments_subscription_id) {
			console.log("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –£ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç cloudpayments_subscription_id!");
			console.log("   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –ù–ï –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ CloudPayments.");
			console.log("   –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ CloudPayments API.");
		} else {
			console.log("\n‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —á–µ—Ä–µ–∑ CloudPayments API");
			console.log(`   Endpoint: POST /api/payments/cloudpayments/cancel-subscription`);
			console.log(`   CloudPayments ID: ${userWithSubscription.cloudpayments_subscription_id}`);
		}

		console.log("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
	} finally {
		await pool.end();
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCancelSubscription();
