import { pool } from "./config/database";
import dotenv from "dotenv";

dotenv.config();

interface UserStats {
	totalUsers: number;
	activeTrialUsers: number;
	expiredTrialUsers: number;
	activePremiumUsers: number;
	expiredPremiumUsers: number;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å 25.09.2025
 */
async function getUserStats(): Promise<UserStats> {
	try {
		// –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ - 25.09.2025
		const startDate = "2025-09-25 00:00:00";

		// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å 25.09.2025
		const totalUsersResult = await pool.query(
			`
            SELECT COUNT(*) as count 
            FROM users
            WHERE created_at >= $1
        `,
			[startDate]
		);
		const totalUsers = parseInt(totalUsersResult.rows[0].count);

		// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º (—Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å 25.09.2025)
		const activeTrialResult = await pool.query(
			`
            SELECT COUNT(DISTINCT s.user_id) as count
            FROM subscriptions s
            INNER JOIN users u ON s.user_id = u.id
            WHERE s.status = 'active' 
            AND s.plan_type = 'trial'
            AND (s.expires_at IS NULL OR s.expires_at > NOW())
            AND u.created_at >= $1
        `,
			[startDate]
		);
		const activeTrialUsers = parseInt(activeTrialResult.rows[0].count);

		// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–∫–æ–Ω—á–∏–≤—à–∏–º—Å—è –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º (–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–º/–∏—Å—Ç—ë–∫—à–∏–º)
		const expiredTrialResult = await pool.query(
			`
            SELECT COUNT(DISTINCT s.user_id) as count
            FROM subscriptions s
            INNER JOIN users u ON s.user_id = u.id
            WHERE s.plan_type = 'trial'
            AND (s.status = 'cancelled' OR s.status = 'unsubscribed' OR 
                 (s.status = 'active' AND s.expires_at IS NOT NULL AND s.expires_at <= NOW()))
            AND u.created_at >= $1
        `,
			[startDate]
		);
		const expiredTrialUsers = parseInt(expiredTrialResult.rows[0].count);

		// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π (—Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å 25.09.2025)
		const activePremiumResult = await pool.query(
			`
            SELECT COUNT(DISTINCT s.user_id) as count
            FROM subscriptions s
            INNER JOIN users u ON s.user_id = u.id
            WHERE s.status = 'active' 
            AND s.plan_type = 'premium'
            AND (s.expires_at IS NULL OR s.expires_at > NOW())
            AND u.created_at >= $1
        `,
			[startDate]
		);
		const activePremiumUsers = parseInt(activePremiumResult.rows[0].count);

		// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–∫–æ–Ω—á–∏–≤—à–µ–π—Å—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π (–æ—Ç–º–µ–Ω—ë–Ω–Ω–æ–π/–∏—Å—Ç—ë–∫—à–µ–π)
		const expiredPremiumResult = await pool.query(
			`
            SELECT COUNT(DISTINCT s.user_id) as count
            FROM subscriptions s
            INNER JOIN users u ON s.user_id = u.id
            WHERE s.plan_type = 'premium'
            AND (s.status = 'cancelled' OR s.status = 'unsubscribed' OR 
                 (s.status = 'active' AND s.expires_at IS NOT NULL AND s.expires_at <= NOW()))
            AND u.created_at >= $1
        `,
			[startDate]
		);
		const expiredPremiumUsers = parseInt(expiredPremiumResult.rows[0].count);

		return {
			totalUsers,
			activeTrialUsers,
			expiredTrialUsers,
			activePremiumUsers,
			expiredPremiumUsers,
		};
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
		throw error;
	}
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–∏–¥–µ –∫—Ä–∞—Å–∏–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –∫–æ–Ω—Å–æ–ª–∏
 */
function displayStatsTable(stats: UserStats): void {
	console.log("\n");
	console.log("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
	console.log("‚ïë                    üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô                ‚ïë");
	console.log("‚ïë                      (—Å 25.09.2025)                          ‚ïë");
	console.log("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
	console.log("‚ïë                                                               ‚ïë");
	console.log(
		`‚ïë  üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:          ${stats.totalUsers.toString().padStart(8)} ‚ïë`
	);
	console.log("‚ïë                                                               ‚ïë");
	console.log(
		`‚ïë  üÜì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º: ${stats.activeTrialUsers
			.toString()
			.padStart(8)} ‚ïë`
	);
	console.log("‚ïë                                                               ‚ïë");
	console.log(
		`‚ïë  ‚è∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–∫–æ–Ω—á–∏–≤—à–∏–º—Å—è –ø—Ä–æ–±–Ω—ã–º:     ${stats.expiredTrialUsers
			.toString()
			.padStart(8)} ‚ïë`
	);
	console.log("‚ïë                                                               ‚ïë");
	console.log(
		`‚ïë  üíé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π:        ${stats.activePremiumUsers
			.toString()
			.padStart(8)} ‚ïë`
	);
	console.log("‚ïë                                                               ‚ïë");
	console.log(
		`‚ïë  üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–∫–æ–Ω—á–∏–≤—à–µ–π—Å—è –ø–æ–¥–ø–∏—Å–∫–æ–π:   ${stats.expiredPremiumUsers
			.toString()
			.padStart(8)} ‚ïë`
	);
	console.log("‚ïë                                                               ‚ïë");
	console.log("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
	console.log("\n");

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	const conversionRate =
		stats.totalUsers > 0
			? ((stats.activePremiumUsers / stats.totalUsers) * 100).toFixed(2)
			: "0.00";
	const activeTrialRate =
		stats.totalUsers > 0 ? ((stats.activeTrialUsers / stats.totalUsers) * 100).toFixed(2) : "0.00";
	const expiredTrialRate =
		stats.totalUsers > 0 ? ((stats.expiredTrialUsers / stats.totalUsers) * 100).toFixed(2) : "0.00";
	const expiredPremiumRate =
		stats.totalUsers > 0
			? ((stats.expiredPremiumUsers / stats.totalUsers) * 100).toFixed(2)
			: "0.00";

	console.log("üìà –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:");
	console.log(`   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–º–∏—É–º: ${conversionRate}%`);
	console.log(`   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–±–Ω—ã–µ: ${activeTrialRate}%`);
	console.log(`   ‚Ä¢ –ó–∞–∫–æ–Ω—á–∏–≤—à–∏–µ—Å—è –ø—Ä–æ–±–Ω—ã–µ: ${expiredTrialRate}%`);
	console.log(`   ‚Ä¢ –ó–∞–∫–æ–Ω—á–∏–≤—à–∏–µ—Å—è –ø—Ä–µ–º–∏—É–º: ${expiredPremiumRate}%`);
	console.log(`   ‚Ä¢ –î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: ${new Date().toLocaleString("ru-RU")}`);
	console.log("\n");
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
 */
async function main(): Promise<void> {
	try {
		console.log("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");

		const stats = await getUserStats();
		displayStatsTable(stats);

		console.log("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!");
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:", error);
		process.exit(1);
	} finally {
		// –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		await pool.end();
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
	main();
}

export { getUserStats, displayStatsTable };
