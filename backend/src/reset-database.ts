import { pool } from './config/database';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ!
 * –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ development –æ–∫—Ä—É–∂–µ–Ω–∏–∏
 */
async function resetDatabase() {
    try {
        console.log('üö® Starting database reset...');
        console.log('‚ö†Ô∏è  WARNING: This will delete ALL data!');
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        await pool.query('DROP TABLE IF EXISTS payments CASCADE');
        console.log('‚úì Dropped payments table');
        
        await pool.query('DROP TABLE IF EXISTS subscriptions CASCADE');
        console.log('‚úì Dropped subscriptions table');
        
        await pool.query('DROP TABLE IF EXISTS users CASCADE');
        console.log('‚úì Dropped users table');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∑–∞–Ω–æ–≤–æ —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π
        await pool.query(`
            CREATE TABLE users (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                email VARCHAR(255) UNIQUE NOT NULL,
                password_hash VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úì Created users table');

        await pool.query(`
            CREATE TABLE subscriptions (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                status VARCHAR(50) NOT NULL DEFAULT 'active',
                plan_type VARCHAR(50) NOT NULL DEFAULT 'trial',
                start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                expires_at TIMESTAMP,
                cloudpayments_subscription_id VARCHAR(255),
                cloudpayments_token VARCHAR(500),
                cancelled_at TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úì Created subscriptions table');

        await pool.query(`
            CREATE TABLE payments (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                subscription_id UUID REFERENCES subscriptions(id) ON DELETE SET NULL,
                cloudpayments_invoice_id VARCHAR(255),
                cloudpayments_subscription_id VARCHAR(255),
                amount DECIMAL(10,2) NOT NULL,
                currency VARCHAR(3) NOT NULL DEFAULT 'RUB',
                status VARCHAR(50) NOT NULL DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úì Created payments table');

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        await pool.query(`
            CREATE INDEX idx_users_email ON users(email);
            CREATE INDEX idx_subscriptions_user_id ON subscriptions(user_id);
            CREATE INDEX idx_subscriptions_status ON subscriptions(status);
            CREATE INDEX idx_subscriptions_cloudpayments_id ON subscriptions(cloudpayments_subscription_id);
            CREATE INDEX idx_payments_user_id ON payments(user_id);
            CREATE INDEX idx_payments_subscription_id ON payments(subscription_id);
            CREATE INDEX idx_payments_invoice_id ON payments(cloudpayments_invoice_id);
        `);
        console.log('‚úì Created database indexes');

        console.log('‚úÖ Database reset completed successfully!');
        console.log('üìù Database is now ready for CloudPayments integration');
        
        process.exit(0);
    } catch (error) {
        console.error('‚ùå Database reset failed:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    resetDatabase();
} 