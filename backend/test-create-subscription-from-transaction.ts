import { pool } from "./src/config/database";
import axios from "axios";

async function createSubscriptionFromTransaction() {
	try {
		console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...\n");

		// –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
		const transactionResult = await pool.query(`
			SELECT 
				u.id as user_id,
				u.email,
				s.id as subscription_id,
				s.cloudpayments_transaction_id,
				s.cloudpayments_subscription_id
			FROM users u
			LEFT JOIN subscriptions s ON u.id = s.user_id
			WHERE s.cloudpayments_transaction_id IS NOT NULL 
			AND s.cloudpayments_subscription_id IS NULL
			ORDER BY s.created_at DESC
			LIMIT 1
		`);

		const transaction = transactionResult.rows[0];

		if (!transaction) {
			console.log("‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
			return;
		}

		console.log(`üë§ –†–∞–±–æ—Ç–∞–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${transaction.email}`);
		console.log(`üí≥ TransactionId: ${transaction.cloudpayments_transaction_id}`);

		// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ CloudPayments
		console.log("\nüîÑ –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ CloudPayments...");

		const transactionDetailsResponse = await axios.post(
			"https://api.cloudpayments.ru/payments/get",
			{ TransactionId: transaction.cloudpayments_transaction_id },
			{
				headers: {
					"Content-Type": "application/json",
					Authorization: `Basic ${Buffer.from(
						`${process.env.CLOUD_PAYMENTS_PUBLIC_ID}:${process.env.CLOUD_PAYMENTS_SECRET_KEY}`
					).toString("base64")}`,
				},
			}
		);

		if (!transactionDetailsResponse.data.Success) {
			console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
			console.log(transactionDetailsResponse.data);
			return;
		}

		const transactionDetails = transactionDetailsResponse.data.Model;
		console.log("‚úÖ –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:");
		console.log(`   - Status: ${transactionDetails.Status}`);
		console.log(`   - Token: ${transactionDetails.Token ? "–µ—Å—Ç—å" : "–Ω–µ—Ç"}`);
		console.log(`   - Amount: ${transactionDetails.Amount}`);

		if (!transactionDetails.Token) {
			console.log("‚ùå –£ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ—Ç Token –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏");
			console.log("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –±—ã–ª —Å–¥–µ–ª–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º recurrent: true");
			return;
		}

		// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ CloudPayments API
		console.log("\nüîÑ –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ CloudPayments API...");

		const subscriptionResponse = await axios.post(
			"https://api.cloudpayments.ru/subscriptions/create",
			{
				token: transactionDetails.Token,
				accountId: transaction.user_id,
				description: "–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Ivy Apply AI",
				email: transaction.email,
				amount: 990,
				currency: "RUB",
				requireConfirmation: false,
				startDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // –ó–∞–≤—Ç—Ä–∞
				interval: "Month",
				period: 1,
			},
			{
				headers: {
					"Content-Type": "application/json",
					Authorization: `Basic ${Buffer.from(
						`${process.env.CLOUD_PAYMENTS_PUBLIC_ID}:${process.env.CLOUD_PAYMENTS_SECRET_KEY}`
					).toString("base64")}`,
				},
			}
		);

		if (!subscriptionResponse.data.Success) {
			console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:");
			console.log(subscriptionResponse.data);
			return;
		}

		const subscriptionData = subscriptionResponse.data.Model;
		console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ CloudPayments:");
		console.log(`   - ID: ${subscriptionData.Id}`);
		console.log(`   - Status: ${subscriptionData.Status}`);
		console.log(`   - Next Payment: ${subscriptionData.NextTransactionDateIso}`);

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		console.log("\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");

		await pool.query(
			`UPDATE subscriptions 
			 SET cloudpayments_subscription_id = $1 
			 WHERE id = $2`,
			[subscriptionData.Id, transaction.subscription_id]
		);

		console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!");
		console.log("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
	} catch (error: any) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
		if (error.response?.data) {
			console.error("CloudPayments API error:", error.response.data);
		}
	} finally {
		await pool.end();
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
createSubscriptionFromTransaction();
