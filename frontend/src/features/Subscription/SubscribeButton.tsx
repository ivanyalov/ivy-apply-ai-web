import React, { useState } from "react";
import { useAuth } from "../../shared/hooks/useAuth";
import { useSubscription } from "../../shared/hooks/useSubscription";
import { useTranslation } from "../../shared/hooks/useTranslation";

const publicId = import.meta.env.VITE_CLOUDPAYMENTS_PUBLIC_ID;

// –î–ª—è TypeScript:
declare global {
	interface Window {
		cp: any;
	}
}

interface CloudPaymentsResponse {
	transactionId: string;
	subscriptionId?: string;
	status: string;
	amount: number;
	currency: string;
	token?: string;
}

interface SubscribeButtonProps {
	agreedToRecurring: boolean;
}

const SubscribeButton: React.FC<SubscribeButtonProps> = ({ agreedToRecurring }) => {
	const [isLoading, setIsLoading] = useState(false);
	const { user } = useAuth();
	const { t } = useTranslation();
	const { handlePaymentSuccess } = useSubscription();

	const handleCloudPayments = () => {
		if (!user?.id) {
			alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏");
			return;
		}

		if (!agreedToRecurring) {
			alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏");
			return;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CloudPayments
		if (typeof window.cp === "undefined") {
			console.error("‚ùå CloudPayments –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!");
			alert("–û—à–∏–±–∫–∞: CloudPayments –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
			return;
		}

		console.log("‚úÖ CloudPayments –¥–æ—Å—Ç—É–ø–µ–Ω:", window.cp);
		console.log("üìã Public ID:", publicId);

		setIsLoading(true);

		try {
			console.log("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º CloudPayments...");
			
			// –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± - –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
			const widget = new window.cp.CloudPayments();
			console.log("‚úÖ –í–∏–¥–∂–µ—Ç —Å–æ–∑–¥–∞–Ω:", widget);
			
			// –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–∂–µ—Ç –Ω–∞–ø—Ä—è–º—É—é
			widget.pay({
				publicId: publicId,
				description: "–ü–æ–¥–ø–∏—Å–∫–∞ Ivy Apply AI",
				amount: 990,
				currency: "RUB",
				invoiceId: "subscription-" + Date.now(),
				accountId: user.id,
				skin: "classic",
				data: {}
			});
			
			console.log("‚úÖ –í–∏–¥–∂–µ—Ç CloudPayments –∑–∞–ø—É—â–µ–Ω");
			
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–∞ CloudPayments:", error);
			alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
			setIsLoading(false);
		}
	};

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
	const handlePaymentSuccessWrapper = async (paymentData: CloudPaymentsResponse) => {
		try {
			console.log("üíæ Processing payment success:", paymentData);

			await handlePaymentSuccess({
				...paymentData,
				accountId: user?.id || "",
			});

			console.log("‚úÖ Payment processed successfully");
			alert("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!");
			window.location.reload();
		} catch (error) {
			console.error("‚ùå Error processing payment:", error);
			alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.");
		} finally {
			setIsLoading(false);
		}
	};

	return (
		<button
			onClick={handleCloudPayments}
			className={`w-full py-3 px-6 rounded-lg text-base font-medium transition-all duration-300 ${
				agreedToRecurring && user?.email_verified && !isLoading
					? "bg-notion-gray-700 text-white hover:bg-notion-gray-600"
					: "bg-notion-gray-700/30 text-notion-gray-500 cursor-not-allowed opacity-60"
			}`}
		>
			{!user?.email_verified
				? t.subscription.verifyEmailButton
				: isLoading
				? t.subscription.processing
				: t.subscription.subscribeButton}
		</button>
	);
};

export default SubscribeButton;